import asyncio
import logging
from datetime import datetime

from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from django.core.management.base import BaseCommand
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from meetups.models import (
    Client,
    Event,
    Presentation,
    Question,
    Visitor,
)
from asgiref.sync import sync_to_async
from conf import settings
from meetups.management.commands.user_keyboards import (
    get_user_main_keyboard,
    get_event_schedule_keyboard,
    get_current_presentation_keyboard,
    get_current_presentation_question_keyboard,
    get_question_main_menu_keyboard,
)

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(name)s - %(funcName)s - %(message)s',
)

logger = logging.getLogger('UserBot')

storage = MemoryStorage()
bot = Bot(settings.TG_TOKEN_API)
dp = Dispatcher(bot=bot, storage=storage)

user_register_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [
        InlineKeyboardButton(text='–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', callback_data='user_register'),
    ],
])


class ClientRegisterFSM(StatesGroup):
    choose_event = State()
    personal_info = State()


@dp.message_handler(commands=['start'])
async def start_command(message: types.Message) -> None:
    client, created = await sync_to_async(Client.objects.get_or_create)(
        chat_id=message.from_user.id,
    )
    if created or not client.first_name or not client.last_name:
        await message.answer('ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç-–±–æ—Ç\n<b>Python Meetups!</b>\n\n'
                             '–Ø –ø–æ–º–æ–≥—É –≤–∞–º –ø–æ–ª—É—á–∏—Ç—å üí™ –º–∞–∫—Å–∏–º—É–º –æ—Ç –∫–∞–∂–¥–æ–≥–æ —Å–æ–±—ã—Ç–∏—è.\n'
                             '–° –º–æ–µ–π –ø–æ–º–æ—â—å—é –≤—ã –º–æ–∂–µ—Ç–µ:\n\n'
                             '‚úÖ –±—ã—Å—Ç—Ä–æ <b>–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è</b> –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ,\n\n'
                             'üìñ –ª–µ–≥–∫–æ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å <b>–ø—Ä–æ–≥—Ä–∞–º–º–æ–π</b>,\n\n'
                             '‚ùì<b>–∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã</b> –¥–æ–∫–ª–∞–¥—á–∏–∫–∞–º\n\n'
                             'üí∞–∞ —Ç–∞–∫–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –Ω–∞—Å, –æ—Ç–ø—Ä–∞–≤–∏–≤ –¥–æ–Ω–∞—Ç.\n\n'
                             '–ï—Å–ª–∏ –≤—ã –≤—ã—Å—Ç—É–ø–∞–µ—Ç–µ –Ω–∞ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏, —Ç–æ –≤—ã —Ç–∞–∫–∂–µ —Å–º–æ–∂–µ—Ç–µ '
                             'üëÄ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã –æ—Ç –∑—Ä–∏—Ç–µ–ª–µ–π –≤–∞—à–µ–π –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏\n\n'
                             'üé´ –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.',
                            parse_mode='HTML',
                            reply_markup=user_register_keyboard,
                            )
    else:
        user_main_keyboard = await get_user_main_keyboard(client)
        await message.answer('–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
                             parse_mode='HTML',
                             reply_markup=user_main_keyboard,
                             )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'user_register', state='*')
async def user_register_handler(callback: types.CallbackQuery) -> None:
    await ClientRegisterFSM.choose_event.set()
    events = await sync_to_async(Event.objects.all)()
    inline_keyboard = []
    async for event in events:
        when_info = f'{event.date.strftime("%d.%m")} {event.start_time.strftime("%H:%M")}'
        name_info = f'{event.name}'
        event_keyboard=[[
            InlineKeyboardButton(text=name_info, callback_data=f'event_{event.id}')
        ],
        [
            InlineKeyboardButton(text=when_info, callback_data=f'event_{event.id}'),
            InlineKeyboardButton(text='‚úÖ', callback_data=f'event_choose_{event.id}'),
            InlineKeyboardButton(text='‚ùî', callback_data=f'event_about_{event.id}'),
        ]]
        inline_keyboard += event_keyboard
    events_keyboard = InlineKeyboardMarkup(inline_keyboard=inline_keyboard)
    await callback.message.edit_text('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ <b>–º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ</b>, –∫–æ—Ç–æ—Ä–æ–µ –í–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç, –Ω–∞–∂–∞–≤ –≥–∞–ª–æ—á–∫—É - ‚úÖ\n\n'
                                     '–í—ã –º–æ–∂–µ—Ç–µ —Ç–∞–∫–∂–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è, –Ω–∞–∂–∞–≤ –Ω–∞ –∑–Ω–∞–∫ –≤–æ–ø—Ä–æ—Å–∞ -‚ùî',
                                     parse_mode='HTML',
                                     reply_markup=events_keyboard,
                                    )


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('event_'),
                           state=ClientRegisterFSM.choose_event)
async def event_choose_handler(callback: types.CallbackQuery, state: FSMContext) -> None:
    event_id = callback.data.split('_')[-1]
    event = await sync_to_async(Event.objects.get)(id=event_id)
    if callback.data.startswith('event_about_'):
        event_register_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', callback_data=f'event_choose_{event.id}'),
                InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data='user_register'),
            ],
        ])
        await callback.message.edit_text(event.description,
                                         parse_mode='HTML',
                                         reply_markup=event_register_keyboard,
                                         )
    if callback.data.startswith('event_choose_'):
        async with state.proxy() as data:
            data['event'] = event

        await ClientRegisterFSM.next()
        await callback.message.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: <b>{event.name}</b>\n'
                                      '–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –í–∞—à–µ –∏–º—è –∏ '
                                      '—Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ò–º—è –§–∞–º–∏–ª–∏—è</b>',
                                      parse_mode='HTML',
                                      )


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_schedule', state='*')
async def show_schedule_handler(callback: types.CallbackQuery) -> None:
    today = datetime.today()
    now = datetime.now()
    current_event = await sync_to_async(Event.objects.filter(date=today, start_time__lte=now.time()).first)()
    await callback.message.answer(f'<b>{current_event.name}</b>\n\n'
                                  f'<em>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ–∫–ª–∞–¥–∞, —á—Ç–æ–±—ã '
                                  f'üìñ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –æ –Ω–µ–º –ø–æ–¥—Ä–æ–±–Ω–µ–µ –∏–ª–∏ '
                                  f'üôã‚Äç‚ôÇÔ∏è–∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–æ–∫–ª–∞–¥—á–∏–∫—É.</em>\n\n'
                                  f'üïì –†–ê–°–ü–ò–°–ê–ù–ò–ï –ù–ê –°–ï–ì–û–î–ù–Ø:',
                                  parse_mode='HTML',
                                  reply_markup=await get_event_schedule_keyboard(current_event),
                                  )


@dp.message_handler(state=ClientRegisterFSM.personal_info)
async def user_register_personal_info_handler(message: types.Message, state: FSMContext) -> None:
    if message.text.count(' ') != 1:
        await message.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.\n'
                             '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <b>–ò–º—è –§–∞–º–∏–ª–∏—è</b>',
                             parse_mode='HTML',
                             )
        return
    first_name, last_name = message.text.split()
    logger.info(f'first_name: {first_name}, last_name: {last_name}')
    client, _ = await sync_to_async(Client.objects.get_or_create)(chat_id=message.from_user.id)
    client.first_name = first_name
    client.last_name = last_name
    await sync_to_async(client.save)()
    async with state.proxy() as data:
        event = data['event']
    await sync_to_async(Visitor.objects.get_or_create)(
        client=client,
        event=event,
    )
    await bot.send_message(client.chat_id,
                           f'{client.first_name} {client.last_name}, –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!',
                           parse_mode='HTML',
                           )
    await state.finish()


@dp.callback_query_handler(lambda callback_query: callback_query.data == 'show_current_presentation', state='*')
async def show_current_presentation_handler(callback: types.CallbackQuery) -> None:
    today = datetime.today()
    now = datetime.now()
    current_event = await sync_to_async(Event.objects.filter(date=today, start_time__lte=now.time()).first)()
    if current_event:
        current_presentation = await sync_to_async(Presentation.objects.filter(
            event=current_event,
            start_time__lte=now.time(),
            is_finished=False,
        ).select_related('speaker').first)()
    speaker_chat_id = current_presentation.speaker.chat_id
    speaker = int(speaker_chat_id) == int(callback.from_user.id)
    logger.info(f'speaker: {speaker}')
    texts = {
        'True': f'C–ï–ô–ß–ê–° –ò–î–ï–¢ –í–ê–® –î–û–ö–õ–ê–î:\n\n'
               f'<b>{current_presentation.name}</b>\n\n'
               f'<b>–î–æ–∫–ª–∞–¥—á–∏–∫</b>\n'
               f'{current_presentation.speaker.first_name} {current_presentation.speaker.last_name}\n\n'
               f'<em>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–æ–ø—Ä–æ—Å—ã'
               f' –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–∫–ª–∞–¥</em>',
        'False': f'C–ï–ô–ß–ê–° –ò–î–ï–¢ –î–û–ö–õ–ê–î:\n\n'
               f'<b>{current_presentation.name}</b>\n\n'
               f'<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n'
               f'{current_presentation.annotation}\n\n'
               f'<b>–î–æ–∫–ª–∞–¥—á–∏–∫</b>\n'
               f'{current_presentation.speaker.first_name} {current_presentation.speaker.last_name}\n\n'\
               f'<em>–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–æ–∫–ª–∞–¥—á–∏–∫—É'
               f' –∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–∞–Ω–Ω—ã–µ —Ä–∞–Ω–µ–µ –≤–æ–ø—Ä–æ—Å—ã –∏'
               f'  –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –≤–∞–º, –Ω–∞–∂–∞–≤ –Ω–∞ üëç</em>\n\n'
    }
    await callback.message.answer(texts[str(speaker)],
                                  parse_mode='HTML',
                                  reply_markup=await get_current_presentation_keyboard(
                                      current_presentation,
                                      speaker,
                                  ),
                                  )

@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('questions_show'), state='*')
async def show_current_presentation_questions_handler(callback: types.CallbackQuery) -> None:
    presentation_id = callback.data.split('_')[-1]
    questions = await sync_to_async(
        Question.objects.filter(
            presentation=presentation_id,
        ).all().select_related('presentation').select_related('client').prefetch_related)('likes')
    presentation = await sync_to_async(
        Presentation.objects.filter(pk=presentation_id).select_related('speaker').first
    )()
    speaker_chat_id = presentation.speaker.chat_id
    speaker = int(speaker_chat_id) == int(callback.from_user.id)
    async for question in questions:
        likes_count = await sync_to_async(question.likes.count)()
        await callback.message.answer(f'<b>{question.presentation.name}:</b>\n\n'
                                      f'{question.text}\n\n'
                                      f'üëç <em>{likes_count}</em>',
                                      parse_mode='HTML',
                                      reply_markup=await get_current_presentation_question_keyboard(
                                        question,
                                        callback.from_user.id,
                                        speaker,
                                      ),
                                    )
    texts = {
        'True': f'–ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏–Ω–æ–≥–¥–∞ <b>–æ–±–Ω–æ–≤–ª—è—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤</b>, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤—ã–µ!',
        'False': f'gfg –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞—Ç—å —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:'
    }
    await callback.message.answer(texts[str(speaker)],
                                  parse_mode='HTML',
                                  reply_markup=await get_question_main_menu_keyboard(
                                      presentation_id,
                                      speaker,
                                  ),
                                  )


class Command(BaseCommand):
    def handle(self, *args, **kwargs):
        executor.start_polling(dp, skip_updates=True)
